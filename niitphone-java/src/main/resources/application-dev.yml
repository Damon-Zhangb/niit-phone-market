logging:
  config: classpath:log-config.xml
server:
  port: 10086
spring:
  datasource:
    druid:
      # 数据源类型
      db-type: com.alibaba.druid.pool.DruidDataSource
      # 连接数据库的url，不同数据库不一样。例如：
      # mysql : jdbc:mysql://ip:port/database
      # oracle : jdbc:oracle:thin:@ip:port:database
      url: jdbc:mysql://47.115.190.1:3306/qsmas?userSSL=false&serverTimezone=GMT%2B8
      # 数据库的用户名
      username: root
      # 数据库的密码
      password: Zmr@2020
      # 驱动（根据url自动识别）这一项可配可不配，如果不配置druid会根据url自动识别dbType，然
      # 后选择相应的driverClassName(建议配置下)
      driver-class-name: com.mysql.cj.jdbc.Driver
      # 始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时（缺省值：0）
      initial-size: 2
      # 最小连接池数量
      min-idle: 5
      # 最大连接池数量
      max-active: 10
      # 程序向连接池中请求连接时,超过maxWait的值后，认为本次请求失败，即连接池
      max-wait: 5000
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。(缺省值：false)
      # 默认是false
      pool-prepared-statements: false
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
      # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-open-prepared-statements: -1
      # 每个连接最多缓存多少个SQL
      max-pool-prepared-statement-per-connection-size: 20
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      max-evictable-idle-time-millis: 900000
      # 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
      validation-query: SELECT now()
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 程序申请连接时,进行连接有效性检查（低效，影响性能）
      test-on-borrow: false
      # 程序返还连接时,进行连接有效性检查（低效，影响性能）
      test-on-return: false
      # 物理连接初始化的时候执行的sql
      connection-init-sqls: SELECT now()
      # 程序没有close连接且空闲时长超过 minEvictableIdleTimeMillis,则会执行validationQuery指定的SQL,以保证该程序连接不会池kill掉,其范围不超过minIdle指定的连接个数。
      keep-alive: true
      # 要求程序从池中get到连接后, N 秒后必须close,否则druid 会强制回收该false,当发现程序有未连接,不管该连接中是活动还是空闲, 以防止进程不会进行close而霸占连接。
      remove-abandoned: true
      # 当druid强制回收连接后，是否将stack trace 记录到日志中
      log-abandoned: true
      # 设置druid 强制回收连接的时限，当程序从池中get到连接开始算起，超过此值后，druid将强制回收该连接，单位秒。应大于业务运行最长时间
      remove-abandoned-timeout: 6000
      # 连接属性。比如设置一些连接池统计方面的配置。慢sql记录
      connection-properties: druid.stat.mergeSql=true; druid.stat.slowSqlMillis=5000

      # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
      filters: stat, wall, slf4j

      filter:
        stat: # 监控统计
          enabled: true
          log-slow-sql: true # 慢SQL记录
          slow-sql-millis: 1000 # 慢SQL执行时间
          merge-sql: true # 是否合并sql
          db-type: mysql # 数据库类型

        slf4j: #sql打印
          enabled: true
          statement-create-after-log-enabled: false
          statement-log-enabled: false
          statement-executable-sql-log-enable: true
          statement-log-error-enabled: true
          result-set-log-enabled: false
        wall: # 防御SQL注入
          enabled: true
          db-type: mysql
          config:
            delete-allow: false
            drop-table-allow: false
            multi-statement-allow: true
  redis:
    host: 127.0.0.1
    port: 6379
    password: hewenping
    timeout: 6000
    jedis:
      pool:
        max-active: 100
        max-idle: 16
        max-wait: 1000ms
        min-idle: 8
  output:
    ansi:
      enabled: detect





